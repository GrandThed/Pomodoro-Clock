{"version":3,"sources":["context/GeneralContext.js","context/ChangingTitle.js","components/Circle.js","components/Toggle.js","components/Time.js","components/Console.js","App.js","serviceWorker.js","index.js"],"names":["GeneralContext","createContext","GeneralContextProvider","props","state","displayConsole","sound","soundEffect","finishWorking","finishRest","notification","working","pause","offset","seconds","workingTime","restingTime","pauseToggle","bind","soundToggle","notificationToggle","personalizetheTimer","reset","setInterval","document","title","Math","floor","setState","setTimeout","this","isDecrease","isWorkingTime","Provider","value","editTimer","children","Component","Circle","stokeColor","stokeOnMove","svgId","Consumer","id","style","strokeDashoffset","cx","cy","r","stroke","strokeWidth","fill","StartStop","pauseState","className","onClick","Time","color","Console","Fragment","window","open","url","playStatus","Sound","status","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.50bc2448.chunk.js","sourcesContent":["import React, { createContext, Component } from \"react\";\r\nimport { changingTitle } from \"./ChangingTitle\";\r\nimport { notifications } from \"./notifications\";\r\n\r\nexport const GeneralContext = createContext();\r\n\r\nexport default class GeneralContextProvider extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      displayConsole: false,\r\n      sound: true,\r\n      soundEffect: {\r\n        finishWorking: \"STOPPED\",\r\n        finishRest: \"STOPPED\",\r\n      },\r\n      notification: false,\r\n      working: true,\r\n      pause: true,\r\n      offset: 0,\r\n      seconds: 1500,\r\n      workingTime: 1500,\r\n      restingTime: 300,\r\n    };\r\n    this.pauseToggle = this.pauseToggle.bind(this);\r\n    this.soundToggle = this.soundToggle.bind(this);\r\n    this.notificationToggle = this.notificationToggle.bind(this);\r\n    this.personalizetheTimer = this.personalizetheTimer.bind(this);\r\n    this.reset = this.reset.bind(this);\r\n  }\r\n  componentDidMount() {\r\n    setInterval(() => {\r\n      changingTitle(this.state.seconds, this.state.working); // exported from /context/ChangingTitle.js\r\n      if (!this.state.pause) {\r\n        if (this.state.seconds > 0) {\r\n          this.setState({\r\n            seconds: this.state.seconds - 1,\r\n          });\r\n        } else {\r\n          this.setState({\r\n            seconds: !this.state.working\r\n              ? this.state.workingTime\r\n              : this.state.restingTime - 1,\r\n            working: !this.state.working,\r\n          });\r\n          if(this.state.working){\r\n            this.setState({\r\n              soundEffect: {\r\n                finishWorking: \"STOPPED\",\r\n                finishRest: \"PLAYING\",\r\n              },\r\n            })\r\n\r\n          }else{\r\n            this.setState({\r\n              soundEffect: {\r\n                finishWorking: \"PLAYING\",\r\n                finishRest: \"STOPPED\",\r\n              },\r\n            })\r\n            \r\n          }\r\n          setTimeout(() => {\r\n            this.setState({\r\n              soundEffect: {\r\n                finishWorking: \"STOPPED\",\r\n                finishRest: \"STOPPED\",\r\n              },\r\n            })\r\n          }, 2500);\r\n        }\r\n        if (this.state.working) {\r\n          this.setState({\r\n            offset:\r\n              this.state.offset < 2516\r\n                ? this.state.offset + 1258 / this.state.workingTime\r\n                : 0,\r\n          });\r\n        } else {\r\n          this.setState({\r\n            offset:\r\n              this.state.offset < 2516\r\n                ? this.state.offset + 1258 / this.state.restingTime\r\n                : 0,\r\n          });\r\n        }\r\n      }\r\n    }, 1000);\r\n  }\r\n  notificationToggle() {\r\n    this.setState({\r\n      notification: !this.state.notification,\r\n    });\r\n  }\r\n  soundToggle() {\r\n    this.setState({\r\n      sound: !this.state.sound,\r\n    });\r\n  }\r\n  pauseToggle() {\r\n    this.setState({\r\n      pause: !this.state.pause,\r\n    });\r\n  }\r\n  personalizetheTimer(isDecrease, isWorkingTime = true) {\r\n    if (isWorkingTime) {\r\n      this.setState({\r\n        seconds:\r\n          this.state.workingTime > 60\r\n            ? isDecrease\r\n              ? this.state.workingTime - 60\r\n              : this.state.workingTime + 60\r\n            : 60,\r\n        workingTime:\r\n          this.state.workingTime > 60\r\n            ? isDecrease\r\n              ? this.state.workingTime - 60\r\n              : this.state.workingTime + 60\r\n            : 60,\r\n      });\r\n    } else {\r\n      this.setState({\r\n        restingTime:\r\n          this.state.restingTime > 60\r\n            ? isDecrease\r\n              ? this.state.restingTime - 60\r\n              : this.state.restingTime + 60\r\n            : 60,\r\n      });\r\n    }\r\n  }\r\n  reset() {\r\n    this.setState({\r\n      working: true,\r\n      pause: true,\r\n      soundEffect: {\r\n        finishWorking: \"STOPPED\",\r\n        finishRest: \"STOPPED\",\r\n      },\r\n      offset: 0,\r\n      seconds: 1500,\r\n      workingTime: 1500,\r\n      restingTime: 300,\r\n    });\r\n  }\r\n  render() {\r\n    return (\r\n      <GeneralContext.Provider\r\n        value={{\r\n          state: this.state,\r\n          pause: this.pauseToggle,\r\n          soundToggle: this.soundToggle,\r\n          notificationToggle: this.notificationToggle,\r\n          editTimer: this.personalizetheTimer,\r\n          reset: this.reset,\r\n        }}\r\n      >\r\n        {this.props.children}\r\n      </GeneralContext.Provider>\r\n    );\r\n  }\r\n}","export const changingTitle = (seconds, working) => {\r\n    document.title = `${\r\n        Math.floor(seconds / 60) <= 9\r\n          ? \"0\" + Math.floor(seconds / 60)\r\n          : Math.floor(seconds / 60)\r\n      }:${seconds % 60 <= 9 ? \"0\" + (seconds % 60) : seconds % 60} ${working ? \"of working\" : \"for a break!\"}`\r\n}\r\n","import React from \"react\";\r\nimport { GeneralContext } from \"../context/GeneralContext\";\r\nimport \"./Circle.css\"\r\n\r\n\r\nexport const Circle = (props) => {\r\n  const stokeColor = props.stokeColor\r\n  const stokeOnMove = props.stokeOnMove\r\n  const svgId = props.svgId\r\n  return (\r\n    <GeneralContext.Consumer>\r\n      {(value) => {\r\n        let offset = value.state.offset\r\n        return (\r\n          <svg id={svgId}>\r\n            <circle\r\n              id=\"innercircle\"\r\n              style={stokeOnMove ? { strokeDashoffset: offset } : {}}\r\n              cx=\"300\"\r\n              cy=\"210\"\r\n              r=\"200\"\r\n              stroke= {stokeColor}\r\n              strokeWidth=\"5\"\r\n              fill=\"transparent\"\r\n            />\r\n          </svg>\r\n        );\r\n      }}\r\n    </GeneralContext.Consumer>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { GeneralContext } from \"../context/GeneralContext\";\r\nimport \"./Toggle.css\";\r\n\r\nexport const StartStop = () => {\r\n  return (\r\n    <GeneralContext.Consumer>\r\n      {(value) => {\r\n        let pauseState = value.state.pause;\r\n        const pause = value.pause;\r\n        return (\r\n          <button className=\"button\" onClick={pause}>\r\n            {pauseState ? \"Start\" : \"Pause\"}\r\n          </button>\r\n        );\r\n      }}\r\n    </GeneralContext.Consumer>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { GeneralContext } from \"../context/GeneralContext\";\r\nimport \"./Time.css\"\r\nexport const Time = () => {\r\n  return (\r\n    <GeneralContext.Consumer>\r\n      {(value) => {\r\n        let seconds = value.state.seconds;\r\n        let working = value.state.working;\r\n        return (\r\n          <div className=\"content\">\r\n            <p className=\"timer-label\">Session</p>\r\n            <p\r\n              id=\"time-left\"\r\n              style={\r\n                !working ? { color: \"DarkOrange\" } : { color: \"DodgerBlue\" }\r\n              }\r\n            >\r\n              {`${\r\n                Math.floor(seconds / 60) <= 9\r\n                  ? \"0\" + Math.floor(seconds / 60)\r\n                  : Math.floor(seconds / 60)\r\n              }:${seconds % 60 <= 9 ? \"0\" + (seconds % 60) : seconds % 60}`}\r\n            </p>\r\n          </div>\r\n        );\r\n      }}\r\n    </GeneralContext.Consumer>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport Sound from \"react-sound\";\r\nimport \"./Console.css\";\r\nimport {\r\n  AiOutlineReload,\r\n  AiFillNotification,\r\n  AiOutlineNotification,\r\n  AiFillSound,\r\n  AiOutlineSound,\r\n  AiFillCaretDown,\r\n  AiFillCaretUp,\r\n  AiOutlineGithub,\r\n  AiOutlineQuestionCircle\r\n} from \"react-icons/ai\";\r\nimport { GeneralContext } from \"../context/GeneralContext\";\r\nexport const Console = () => {\r\n  return (\r\n    <GeneralContext.Consumer>\r\n      {(value) => {\r\n        let notificationToggle = value.notificationToggle;\r\n        let notification = value.state.notification;\r\n        let soundToggle = value.soundToggle;\r\n        let sound = value.state.sound;\r\n        let soundEffect = value.state.soundEffect;\r\n        let restingTime = value.state.restingTime;\r\n        let workingTime = value.state.workingTime;\r\n        let editTimer = value.editTimer;\r\n        let reset = value.reset;\r\n        return (\r\n          <React.Fragment>\r\n          <div className=\"console-div\">\r\n            <button onClick={() => window.open(\"https://en.wikipedia.org/wiki/Pomodoro_Technique\")} className=\"more-info wikipedia\"><AiOutlineQuestionCircle /></button>\r\n            <Sound id=\"beep\" url=\"https://freesound.org/data/previews/531/531512_7614679-lq.mp3\" \r\n            playStatus={Sound.status[soundEffect.finishWorking]}\r\n            />\r\n            <Sound url=\"https://freesound.org/data/previews/339/339343_4067257-lq.mp3\" \r\n            playStatus={Sound.status[soundEffect.finishRest]}\r\n            />\r\n            <div className=\"adjust-btns resting break-label\">\r\n              <button\r\n                className=\"break-decrement\"\r\n                onClick={() => editTimer(true, false)}\r\n              >\r\n                <AiFillCaretDown />\r\n              </button>\r\n              <p className=\"break-length length\">{restingTime / 60}</p>\r\n              <button\r\n                className=\"break-increment\"\r\n                onClick={() => editTimer(false, false)}\r\n              >\r\n                <AiFillCaretUp />\r\n              </button>\r\n            </div>\r\n            <button onClick={reset} className=\"option-btns\">\r\n              <AiOutlineReload />\r\n            </button>\r\n            <button onClick={notificationToggle} className=\"option-btns\">\r\n              {notification ? (\r\n                <AiFillNotification />\r\n              ) : (\r\n                <AiOutlineNotification />\r\n              )}\r\n            </button>\r\n            <button onClick={soundToggle} className=\"option-btns\">\r\n              {sound ? <AiFillSound /> : <AiOutlineSound />}\r\n            </button>\r\n            <div className=\"adjust-btns session session-label\">\r\n              <button\r\n                className=\"session-decrement\"\r\n                onClick={() => editTimer(true, true)}\r\n              >\r\n                <AiFillCaretDown />\r\n              </button>\r\n              <p className=\"session-length length\">{workingTime / 60}</p>\r\n              <button\r\n                className=\"session-increment\"\r\n                onClick={() => editTimer(false, true)}\r\n              >\r\n                <AiFillCaretUp />\r\n              </button>\r\n            </div>\r\n          <button onClick={() => window.open(\"https://github.com/GrandThed/Pomodoro-Clock\")} className=\"more-info repo\"><AiOutlineGithub /></button>\r\n          </div>\r\n          </React.Fragment>\r\n        );\r\n      }}\r\n    </GeneralContext.Consumer>\r\n    \r\n  );\r\n};\r\n","import React from \"react\";\nimport { Circle } from \"./components/Circle\";\nimport GeneralContextProvider, {\n  GeneralContext,\n} from \"./context/GeneralContext\";\nimport { StartStop } from \"./components/Toggle\";\nimport { Time } from \"./components/Time\";\nimport { Console } from \"./components/Console\";\n\nconst App = () => {\n  // 2516‬\n  // 1258\n  return (\n    <GeneralContextProvider>\n      <GeneralContext.Consumer>\n        {(value) => {\n          return (\n            <div>\n            <div className=\"App\">\n                <Console></Console>\n              <div>\n                <div className=\"content\">\n                  <Time></Time>\n                  <StartStop></StartStop>\n                  <div className=\"circles\">\n                    <Circle\n                      svgId=\"circle\"\n                      stokeOnMove={true}\n                      stokeColor=\"DarkOrange\"\n                    ></Circle>\n                    <Circle\n                      svgId=\"circle1\"\n                      stokeOnMove={false}\n                      stokeColor=\"DodgerBlue\"\n                    ></Circle>\n                  </div>\n                </div>\n              </div>\n            </div>\n            </div>\n          );\n        }}\n      </GeneralContext.Consumer>\n    </GeneralContextProvider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}